import logging
from agents.langchain_agent import build_agent_chain
from agents.telegram_agent import bot

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É LangChain
agent_chain = build_agent_chain()


def process_task(task_description: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é —Ü–µ–ø–æ—á–∫–∏ LangChain."""
    initial_input = {"task_description": task_description}
    logger.info(f"üéØ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {task_description}")

    result = agent_chain.invoke(initial_input)

    logger.info(f"üì¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result}")
    print(result)

    return result.get("response", "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")


@bot.message_handler(commands=['task'])
def handle_task_command(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /task <–æ–ø–∏—Å–∞–Ω–∏–µ_–∑–∞–¥–∞—á–∏>."""
    task_description = message.text.replace("/task", "").strip()
    if not task_description:
        bot.reply_to(message, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /task")
        return

    bot.reply_to(message, f"‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É: {task_description}")
    result = process_task(task_description)
    bot.send_message(message.chat.id, result)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    logger.info("üöÄ AI-–∞–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)


if __name__ == "__main__":
    main()
